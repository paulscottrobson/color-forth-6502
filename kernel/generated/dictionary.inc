; **** Generated by createdictionary.py ****
KernelDictionary:
; ==== ! ====
	.byte 6
	.word Memory_WriteWord
	.byte 0
	.byte $00
	.byte $a1
; ==== + ====
	.byte 6
	.word Binary_Add
	.byte 0
	.byte $00
	.byte $ab
; ==== +! ====
	.byte 7
	.word Memory_AddWord
	.byte 0
	.byte $00
	.byte $2b,$a1
; ==== ++ ====
	.byte 7
	.word Unary_Inc1
	.byte 0
	.byte $00
	.byte $2b,$ab
; ==== +++ ====
	.byte 8
	.word Unary_Inc2
	.byte 0
	.byte $00
	.byte $2b,$2b,$ab
; ==== +or ====
	.byte 8
	.word Binary_Or
	.byte 0
	.byte $00
	.byte $2b,$0f,$92
; ==== , ====
	.byte 6
	.word System_CompileWord
	.byte 0
	.byte $00
	.byte $ac
; ==== - ====
	.byte 6
	.word Unary_Not
	.byte 0
	.byte $00
	.byte $ad
; ==== -- ====
	.byte 7
	.word UnaryDec1
	.byte 0
	.byte $00
	.byte $2d,$ad
; ==== --- ====
	.byte 8
	.word Unary_Dec2
	.byte 0
	.byte $00
	.byte $2d,$2d,$ad
; ==== 0 ====
	.byte 6
	.word Constant_0
	.byte 0
	.byte $00
	.byte $b0
; ==== 1 ====
	.byte 6
	.word Constant_1
	.byte 0
	.byte $00
	.byte $b1
; ==== 1- ====
	.byte 7
	.word Constant_minus1
	.byte 0
	.byte $00
	.byte $31,$ad
; ==== 10 ====
	.byte 7
	.word Constant_10
	.byte 0
	.byte $00
	.byte $31,$b0
; ==== 100 ====
	.byte 8
	.word Constant_100
	.byte 0
	.byte $00
	.byte $31,$30,$b0
; ==== 1024 ====
	.byte 9
	.word Constant_1024
	.byte 0
	.byte $00
	.byte $31,$30,$32,$b4
; ==== 12 ====
	.byte 7
	.word Constant_12
	.byte 0
	.byte $00
	.byte $31,$b2
; ==== 127 ====
	.byte 8
	.word Constant_127
	.byte 0
	.byte $00
	.byte $31,$32,$b7
; ==== 128 ====
	.byte 8
	.word Constant_128
	.byte 0
	.byte $00
	.byte $31,$32,$b8
; ==== 14 ====
	.byte 7
	.word Constant_14
	.byte 0
	.byte $00
	.byte $31,$b4
; ==== 16 ====
	.byte 7
	.word Constant_16
	.byte 0
	.byte $00
	.byte $31,$b6
; ==== 16* ====
	.byte 8
	.word Unary_Times16
	.byte 0
	.byte $00
	.byte $31,$36,$aa
; ==== 2 ====
	.byte 6
	.word Constant_2
	.byte 0
	.byte $00
	.byte $b2
; ==== 2* ====
	.byte 7
	.word Unary_Times2
	.byte 0
	.byte $00
	.byte $32,$aa
; ==== 2/ ====
	.byte 7
	.word Unary_Div2
	.byte 0
	.byte $00
	.byte $32,$af
; ==== 2048 ====
	.byte 9
	.word Constant_2048
	.byte 0
	.byte $00
	.byte $32,$30,$34,$b8
; ==== 24 ====
	.byte 7
	.word Constant_24
	.byte 0
	.byte $00
	.byte $32,$b4
; ==== 255 ====
	.byte 8
	.word Constant_255
	.byte 0
	.byte $00
	.byte $32,$35,$b5
; ==== 256 ====
	.byte 8
	.word Constant_256
	.byte 0
	.byte $00
	.byte $32,$35,$b6
; ==== 32 ====
	.byte 7
	.word Constant_32
	.byte 0
	.byte $00
	.byte $33,$b2
; ==== 32767 ====
	.byte 10
	.word Constant_32767
	.byte 0
	.byte $00
	.byte $33,$32,$37,$36,$b7
; ==== 32768 ====
	.byte 10
	.word Constant_32768
	.byte 0
	.byte $00
	.byte $33,$32,$37,$36,$b8
; ==== 4 ====
	.byte 6
	.word Constant_4
	.byte 0
	.byte $00
	.byte $b4
; ==== 4* ====
	.byte 7
	.word Unary_Times4
	.byte 0
	.byte $00
	.byte $34,$aa
; ==== 4/ ====
	.byte 7
	.word Unary_Div4
	.byte 0
	.byte $00
	.byte $34,$af
; ==== 4096 ====
	.byte 9
	.word Constant_4096
	.byte 0
	.byte $00
	.byte $34,$30,$39,$b6
; ==== 512 ====
	.byte 8
	.word Constant_512
	.byte 0
	.byte $00
	.byte $35,$31,$b2
; ==== 6 ====
	.byte 6
	.word Constant_6
	.byte 0
	.byte $00
	.byte $b6
; ==== 64 ====
	.byte 7
	.word Constant_64
	.byte 0
	.byte $00
	.byte $36,$b4
; ==== 8 ====
	.byte 6
	.word Constant_8
	.byte 0
	.byte $00
	.byte $b8
; ==== 8* ====
	.byte 7
	.word Unary_Times8
	.byte 0
	.byte $00
	.byte $38,$aa
; ==== ?dup ====
	.byte 9
	.word Stack_QDup
	.byte 0
	.byte $00
	.byte $3f,$04,$15,$90
; ==== @ ====
	.byte 6
	.word Memory_ReadWord
	.byte 0
	.byte $00
	.byte $80
; ==== abs ====
	.byte 8
	.word Unary_Abs
	.byte 0
	.byte $00
	.byte $01,$02,$93
; ==== and ====
	.byte 8
	.word Binary_And
	.byte 0
	.byte $00
	.byte $01,$0e,$84
; ==== break ====
	.byte 10
	.word System_Break
	.byte 0
	.byte $00
	.byte $02,$12,$05,$01,$8b
; ==== c ====
	.byte 6
	.word System_ResetStack
	.byte 0
	.byte $00
	.byte $83
; ==== c! ====
	.byte 7
	.word Memory_WriteByte
	.byte 0
	.byte $00
	.byte $03,$a1
; ==== c, ====
	.byte 7
	.word System_CompileByte
	.byte 0
	.byte $00
	.byte $03,$ac
; ==== c@ ====
	.byte 7
	.word Memory_ReadByte
	.byte 0
	.byte $00
	.byte $03,$80
; ==== cold ====
	.byte 9
	.word System_ColdStart
	.byte 0
	.byte $00
	.byte $03,$0f,$0c,$84
; ==== drop ====
	.byte 9
	.word Stack_Drop
	.byte 0
	.byte $00
	.byte $04,$12,$0f,$90
; ==== dup ====
	.byte 8
	.word Stack_Dup
	.byte 0
	.byte $00
	.byte $04,$15,$90
; ==== negate ====
	.byte 11
	.word Unary_Negate
	.byte 0
	.byte $00
	.byte $0e,$05,$07,$01,$14,$85
; ==== nip ====
	.byte 8
	.word Stack_Nip
	.byte 0
	.byte $00
	.byte $0e,$09,$90
; ==== or ====
	.byte 7
	.word Binary_Xor
	.byte 0
	.byte $00
	.byte $0f,$92
; ==== over ====
	.byte 9
	.word Stack_Over
	.byte 0
	.byte $00
	.byte $0f,$16,$05,$92
; ==== pull ====
	.byte 9
	.word Stack_Pull
	.byte 0
	.byte $80
	.byte $10,$15,$0c,$8c
; ==== push ====
	.byte 9
	.word Stack_Push
	.byte 0
	.byte $80
	.byte $10,$15,$13,$88
; ==== reset ====
	.byte 10
	.word System_ResetUserDictionary
	.byte 0
	.byte $00
	.byte $12,$05,$13,$05,$94
; ==== swap ====
	.byte 9
	.word Stack_Swap
	.byte 0
	.byte $00
	.byte $13,$17,$01,$90

	.byte 0
