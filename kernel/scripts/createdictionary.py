# ******************************************************************************
# ******************************************************************************
#
#		Name : 		createdictionary.py
#		Purpose : 	Generate fixed dictionary file
#		Author : 	Paul Robson (paul@robsons.org.uk)
#		Created : 	1st October 2019
#
# ******************************************************************************
# ******************************************************************************
#
#		Dictionary Format:
#			+0 		Offset to next (length + 5)
#			+1,+2	Address of word
#			+3 		Bank of word (zero normally)
#			+4 		Type bits
#						bit 7 : set if compile only (C)
#						bit 6 : set if immediate (I)
#			+5 ..	Name in 6 bit ASCII with last bit set.
#
# ******************************************************************************

import os,re

words = {}

for root,dirs,files in os.walk("."):
	for f in files:
		if f.endswith(".voc"):
			for l in open(root+os.sep+f).readlines():
				if l.find(";;") >= 0:
					m = re.match("^(.*?)\\:\\s*\\;\\;\\s*\\[(.*)\\](.*)$",l)
					assert m is not None,"Bad definition line "+l
					name = m.group(2).strip().upper()
					for c in name:
						assert ord(c) >= 32 and ord(c) < 96,"Bad name "+name
					assert name not in words,"Duplicate name "+name
					typeByte = 0
					typeDef = m.group(3).upper()
					if typeDef.find("C") >= 0:
						typeByte |= 0x80
					if typeDef.find("I") >= 0:
						typeByte |= 0x40
					words[name] = { "name":name,"type":typeByte,"label":m.group(1).strip() }
#
keys = [x for x in words.keys()]
keys.sort()
print("; **** Generated by createdictionary.py ****")
print("KernelDictionary:")
for k in keys:
	de = words[k]
	print("; ==== {0} ====".format(k.lower()))
	print("\t.byte {0}".format(len(k)+5))
	print("\t.word "+de["label"])
	print("\t.byte 0")
	print("\t.byte ${0:02x}".format(de["type"]))	
	cname = [ord(c) & 0x3F for c in k]	
	cname[-1] = cname[-1] | 0x80
	print("\t.byte {0}".format(",".join(["${0:02x}".format(c) for c in cname])))

print("\n\t.byte 0")