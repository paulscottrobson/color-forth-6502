; ******************************************************************************
; ******************************************************************************
;
;		Name : 		unary.voc
;		Purpose : 	Simple Unary Functions
;		Author : 	Paul Robson (paul@robsons.org.uk)
;		Created : 	1st October 2019
;
; ******************************************************************************
; ******************************************************************************

; ******************************************************************************
;
;									Byte Swap
;
; ******************************************************************************

Unary_BSwap:
		pha 								; save A
		tya 								; Y->A
		ply 								; old A->Y
		rts

; ******************************************************************************
;
;							  - (1's complement)
;
; ******************************************************************************

Unary_Not: 	;; [-]
		eor 	#$FF
		pha
		tya
		eor 	#$FF
		tay
		pla
		rts

; ******************************************************************************
;
;								 Absolute value
;
; ******************************************************************************

Unary_Abs: 		;; [abs]
		cpy 	#0 							; do -ve code if -ve
		bmi 	Unary_Negate
		rts

; ******************************************************************************
;
;							 negate (2's complement)
;
; ******************************************************************************

Unary_Negate: 	;; [negate]
		eor 	#$FF
		pha
		tya
		eor 	#$FF
		tay
		pla
		.incya
		rts

; ******************************************************************************
;
;							 	Arithmetic scalars
;
; ******************************************************************************

Times2:	.macro
		asl 	a 							; shift low left
		pha
		tya 								; shift high left
		rol 	a 
		tay
		pla
		.endm

Div2: 	.macro
		pha 								; save low
		tya 								; get high, shift MSB into C
		asl 	a
		tya 								; get high again, rotate C in
		ror 	a
		tay
		pla 								; restore low and rotate right
		ror 	a
		.endm

Unary_Times16:	 ;; [16*]
		Times2			
Unary_Times8:	 ;; [8*]
		Times2			
Unary_Times4:	 ;; [4*]
		Times2			
Unary_Times2:	 ;; [2*]
		Times2		
		rts	

Unary_Div4:	 ;; [4/]
		Div2
Unary_Div2:	 ;; [2/]
		Div2
		rts

; ******************************************************************************
;
;						Increment and Decrement routines
;
; ******************************************************************************

Unary_Inc2: ;; [+++]
		.incya		
Unary_Inc1: ;; [++]
		.incya
		rts

Unary_Dec2: ;; [---]
		sec 	
		sbc 	#2
		bcs		*+3
		dey
		rts		

UnaryDec1: ;; [--]
		sec 	
		sbc 	#1
		bcs		*+3
		dey
		rts		

