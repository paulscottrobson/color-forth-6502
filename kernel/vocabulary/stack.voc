; ******************************************************************************
; ******************************************************************************
;
;		Name : 		stack.voc
;		Purpose : 	Stack Functions
;		Author : 	Paul Robson (paul@robsons.org.uk)
;		Created : 	1st October 2019
;
; ******************************************************************************
; ******************************************************************************

; ******************************************************************************
;
;									Drop TOS
;
; ******************************************************************************

Stack_Drop:	;; [drop]
		.drop1
		rts

; ******************************************************************************
;
;							Duplicate TOS if non-zero
;
; ******************************************************************************

Stack_QDup: ;; [?dup]
		cmp 	#0
		bne 	Stack_Dup
		cpy 	#0
		bne 	Stack_Dup
		rts
		
; ******************************************************************************
;
;								  Duplicate TOS
;
; ******************************************************************************

Stack_Dup:	;; [dup]
		pha
		.savestack
		pla
		rts

; ******************************************************************************
;
;								 Nip out 2nd element
;
; ******************************************************************************

Stack_Nip:	;; [nip]
		dex
		rts

; ******************************************************************************
;
;								 Copy 2nd element to top
;
; ******************************************************************************

Stack_Over:	;; [over]
		.savestack 	
		lda 	hStack-1,x 					; copy 2nd element to YA
		tay
		lda 	lStack-1,x
		rts

; ******************************************************************************
;
;								 Swap top two elements
;
; ******************************************************************************

Stack_Swap:	;; [swap]
		sta 	zTemp0 						; save A
		sty 	zTemp0+1 					; save Y
		lda 	lStack,x 					; push 2nd A on stack
		pha
		lda 	hStack,x 					; get 2nd Y
		tay
		lda 	zTemp0 						; first A
		sta 	lStack,x
		lda 	zTemp0+1					; first Y
		sta 	hStack,x
		pla 								; restore 2nd A
		rts

; ******************************************************************************
;
;							   Push TOS to return stack
;
; ******************************************************************************

Stack_Push: ;; [push] C
		sta 	zTemp0 						; save TOS
		sty 	zTemp0+1
		stx 	zTemp1 						; save X

		plx 								; return address into YX
		ply

		lda 	zTemp0						; push LSB
		pha
		lda 	zTemp0+1 					; push MSB
		pha 

		phy 								; save address back.
		phx
		ldx 	zTemp1 						; restore X
		.drop1 								; and restore the stack by dropping pushed value.
		rts

; ******************************************************************************
;
;							   Pull TOS off return stack
;
; ******************************************************************************

Stack_Pull: ;; [pull] C
		.savestack 							; save current TOS in next slot.
		pla 								; get return address
		sta 	zTemp0
		ply
		;
		pla 								; get MSB
		sta 	zTemp1+1
		pla  								; get LSB
		sta 	zTemp1
		;
		phy 								; restore return address.
		lda 	zTemp0
		pha

		lda 	zTemp1 						; set up YA
		ldy 	zTemp1+1
		rts
